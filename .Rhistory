library(devtools)
https://github.com/tomli1234/FamilyCohort.git
download.file('https://github.com/tomli1234/FamilyCohort.git', 'master.zip')
install_local('master.zip')
install_local('master.zip')
getwd()
download.file('https://github.com/tomli1234/FamilyCohort.git', 'master')
install_local('master')
download.file('https://github.com/tomli1234/FamilyCohort', 'master.zip')
download.file('https://github.com/tomli1234/FamilyCohort')
download.file('https://github.com/tomli1234/FamilyCohort.git', 'master.zip')
library(Rtools)
install.packages('Rtools')
library(Rtools)
library(data.table)
library(FamilyCohort)
library(devtools)
install_local('C:\\Users\\tomli\\Desktop\\FamilyCohort')
install_local('C:\\Users\\tomli\\Desktop\\FamilyCohort')
library(devtools)
install_local('C:\\Users\\tomli\\Desktop\\FamilyCohort')
library(FamilyCohort)
FC_table_1
library(data.table)
library(tidyverse)
library(survey)
library(scales)
library(gridExtra)
library(FamilyCohort)
FC_table_1
FC_table_1
install_local('C:\\Users\\tomli\\Desktop\\FamkilyCohort')
library(devtools)
install_local('C:\\Users\\tomli\\Desktop\\FamkilyCohort')
install_local('C:\\Users\\tomli\\Desktop\\FamilyCohort')
library(FamilyCohort)
FC_table_1
FC_table_1
remove.packages('FamilyCohort')
library(FamilyCohort)
remove.packages('FamilyCohort')
library(FamilyCohort)
library(devtools)
install_local('C:\\Users\\tomli\\Desktop\\FamilyCohort')
library(FamilyCohort)
FC_table_1
remove.packages('FamilyCohort')
library(FamilyCohort)
FC_table_1
install_local('C:\\Users\\tomli\\Desktop\\FamilyCohort')
library(devtools)
install_local('C:\\Users\\tomli\\Desktop\\FamilyCohort')
library(FamilyCohort)
FC_table_1
library(FamilyCohort)
library(devtools)
install_local('C:\\Users\\tomli\\Desktop\\FamilyCohort')
library(FamilyCohort)
FC_table_1
FC_cohen_effect
remove.packages('FamilyCohort')
library(devtools)
install_local
install_local('C:\\Users\\tomli\\Desktop\\FamilyCohort')
library(devtools)
install_local('C:\\Users\\tomli\\Desktop\\FamilyCohort')
library(FamilyCohort)
FC_chisq.test
FC_table_1
library(FamilyCohort)
FC_chisq.test
remove.packages('TTTrcpp')
library(devtools)
install_local('C:\\Users\\tomli\\Desktop\\TTTrcpp')
# External validation of HKU mortality model for diabetic patients
# Using Singapore's data
# Tom Li, tomli123@hku.hk, 25 Oct 2016
library(rms); library(Hmisc); library(ggplot2); library(survival)
rm(list=ls())
# External validation of HKU mortality model for diabetic patients
# Using Singapore's data
# Tom Li, tomli123@hku.hk, 25 Oct 2016
library(rms); library(Hmisc); library(ggplot2); library(survival)
rm(list=ls())
source('C:\\Users\\tomli\\Desktop\\DM\\GDP_deflator.R')
source('C:\\Users\\tomli\\Desktop\\DM\\GDP_deflator.R')
smooth_cost <- read.csv('C:\\Users\\tomli\\Desktop\\DM\\smooth_cost.csv')
HA_cost
# A script for smoothing price using GDP deflator
# Assume that the % change is the same for the two quantities
rm(list=ls())
library(tidyverse)
library(reshape2)
library(parallel)
setwd("C:\\Users\\tomli\\Desktop\\DM")
GDP_deflator <- read.csv('GDP_deflator_2014_byYear.csv') %>%
mutate(Time = 1:nrow(.))
# plot(GDP ~ Time, data = GDP_deflator, type = 'l')
HA_cost <- read.csv('HA cost.csv') %>%
rename('2003' = X2003,
'2013' = X2013) %>%
melt(id = 'Service') %>%
rename(Year = variable,
cost = value)
diff_perc_change <- function(x, y, weight) {
sum1 <- sum(weight[-length(x)]^0.5 * abs(diff(x)/x[-length(x)] - diff(y)/y[-length(y)]))
sum2 <- sum(weight[-1]^0.5 * abs(diff(x)/x[-1] - diff(y)/y[-1]))
mean(c(sum1, sum2))
}
smooth <- function(service) {
library(tidyverse)
x <- GDP_deflator$GDP
y <- numeric(nrow(GDP_deflator))
y[c(43,53)] <- HA_cost %>%
filter(Service == service) %>%
select(cost) %>%
unlist()
missing <- (1:length(y))[-c(43, 53)]
y[missing] <- NA
y[missing] <- mean(y, na.rm=TRUE)
not_missing <- (1:length(y))[-missing]
distance <- apply(sapply(missing, function(x) x - not_missing), 2, function(x) min(abs(x)))
missing <- missing[order(distance)]
weight <- 1/(1+apply(sapply(1:length(x), function(x) x - not_missing), 2, function(x) min(abs(x))))
for(k in 1:100) {
for(i in missing) {
iter <- 1
while(iter < 30) {
old_coint <- diff_perc_change(x, y, weight)
y_i_old <- y[i]
y[i] <- rnorm(n = 1, mean = y[i], sd = mean(y)/10)
eps <- diff_perc_change(x, y, weight) - old_coint
if(eps > 0) {
y[i] <- y_i_old
}
iter <- iter + 1
}
}
}
output <- data.frame(y) %>%
mutate(Year = GDP_deflator$Year,
Service = service) %>%
rename(cost = y)
return(output)
}
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, list("smooth","HA_cost","GDP_deflator","diff_perc_change"),envir = .GlobalEnv)
smooth_cost <- parLapply(cl, unique(HA_cost$Service), smooth)
smooth_cost <- Reduce(rbind, smooth_cost)
figure <- function(service) {
y <- smooth_cost %>%
filter(Service == service) %>%
select(cost) %>%
as.matrix()
plot(GDP ~ Year, data = GDP_deflator, type= 'l', xaxt="n", ylab = 'GDP', xlab = 'Year', main = service)
legend(x = 1970, y = 2000000, legend = c('GDP',paste0('Cost for ', service)),
lty = c(1, 0),
pch = c(-1, 1),
col = c(1,2))
par(new= TRUE)
plot(y = y, x = GDP_deflator$Year, cex=0.5, yaxt="n",xaxt="n", ylab = "", xlab = '', col = 2)
abline(v = c(2003, 2013))
axis(side = 4, col = 2)
mtext(side = 1, at = c(1960, 1980, 2003, 2013), text = c(1960, 1980, 2003, 2013), padj = 1)
}
write.csv(smooth_cost, 'smooth_cost.csv')
# A script for smoothing price using GDP deflator
# Assume that the % change is the same for the two quantities
rm(list=ls())
library(tidyverse)
library(reshape2)
library(parallel)
setwd("C:\\Users\\tomli\\Desktop\\DM")
GDP_deflator <- read.csv('GDP_deflator_2014_byYear.csv') %>%
mutate(Time = 1:nrow(.))
# plot(GDP ~ Time, data = GDP_deflator, type = 'l')
HA_cost <- read.csv('HA cost.csv') %>%
rename('2003' = X2003,
'2013' = X2013) %>%
melt(id = 'Service') %>%
rename(Year = variable,
cost = value)
diff_perc_change <- function(x, y, weight) {
sum1 <- sum(weight[-length(x)]^0.1 * abs(diff(x)/x[-length(x)] - diff(y)/y[-length(y)]))
sum2 <- sum(weight[-1]^0.1 * abs(diff(x)/x[-1] - diff(y)/y[-1]))
mean(c(sum1, sum2))
}
smooth <- function(service) {
library(tidyverse)
x <- GDP_deflator$GDP
y <- numeric(nrow(GDP_deflator))
y[c(43,53)] <- HA_cost %>%
filter(Service == service) %>%
select(cost) %>%
unlist()
missing <- (1:length(y))[-c(43, 53)]
y[missing] <- NA
y[missing] <- mean(y, na.rm=TRUE)
not_missing <- (1:length(y))[-missing]
distance <- apply(sapply(missing, function(x) x - not_missing), 2, function(x) min(abs(x)))
missing <- missing[order(distance)]
weight <- 1/(1+apply(sapply(1:length(x), function(x) x - not_missing), 2, function(x) min(abs(x))))
for(k in 1:100) {
for(i in missing) {
iter <- 1
while(iter < 30) {
old_coint <- diff_perc_change(x, y, weight)
y_i_old <- y[i]
y[i] <- rnorm(n = 1, mean = y[i], sd = mean(y)/10)
eps <- diff_perc_change(x, y, weight) - old_coint
if(eps > 0) {
y[i] <- y_i_old
}
iter <- iter + 1
}
}
}
output <- data.frame(y) %>%
mutate(Year = GDP_deflator$Year,
Service = service) %>%
rename(cost = y)
return(output)
}
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, list("smooth","HA_cost","GDP_deflator","diff_perc_change"),envir = .GlobalEnv)
smooth_cost <- parLapply(cl, unique(HA_cost$Service), smooth)
# A script for smoothing price using GDP deflator
# Assume that the % change is the same for the two quantities
rm(list=ls())
library(tidyverse)
library(reshape2)
library(parallel)
setwd("C:\\Users\\tomli\\Desktop\\DM")
GDP_deflator <- read.csv('GDP_deflator_2014_byYear.csv') %>%
mutate(Time = 1:nrow(.))
# plot(GDP ~ Time, data = GDP_deflator, type = 'l')
HA_cost <- read.csv('HA cost.csv') %>%
rename('2003' = X2003,
'2013' = X2013) %>%
melt(id = 'Service') %>%
rename(Year = variable,
cost = value)
diff_perc_change <- function(x, y, weight) {
sum1 <- sum(weight[-length(x)]^0.1 * abs(diff(x)/x[-length(x)] - diff(y)/y[-length(y)]))
sum2 <- sum(weight[-1]^0.1 * abs(diff(x)/x[-1] - diff(y)/y[-1]))
mean(c(sum1, sum2))
}
smooth <- function(service) {
library(tidyverse)
x <- GDP_deflator$GDP
y <- numeric(nrow(GDP_deflator))
y[c(43,53)] <- HA_cost %>%
filter(Service == service) %>%
select(cost) %>%
unlist()
missing <- (1:length(y))[-c(43, 53)]
y[missing] <- NA
y[missing] <- mean(y, na.rm=TRUE)
not_missing <- (1:length(y))[-missing]
distance <- apply(sapply(missing, function(x) x - not_missing), 2, function(x) min(abs(x)))
missing <- missing[order(distance)]
weight <- 1/(1+apply(sapply(1:length(x), function(x) x - not_missing), 2, function(x) min(abs(x))))
for(k in 1:200) {
for(i in missing) {
iter <- 1
while(iter < 50) {
old_coint <- diff_perc_change(x, y, weight)
y_i_old <- y[i]
y[i] <- rnorm(n = 1, mean = y[i], sd = mean(y)/10)
eps <- diff_perc_change(x, y, weight) - old_coint
if(eps > 0) {
y[i] <- y_i_old
}
iter <- iter + 1
}
}
}
output <- data.frame(y) %>%
mutate(Year = GDP_deflator$Year,
Service = service) %>%
rename(cost = y)
return(output)
}
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, list("smooth","HA_cost","GDP_deflator","diff_perc_change"),envir = .GlobalEnv)
smooth_cost <- parLapply(cl, unique(HA_cost$Service), smooth)
smooth_cost <- Reduce(rbind, smooth_cost)
figure <- function(service) {
y <- smooth_cost %>%
filter(Service == service) %>%
select(cost) %>%
as.matrix()
plot(GDP ~ Year, data = GDP_deflator, type= 'l', xaxt="n", ylab = 'GDP', xlab = 'Year', main = service)
legend(x = 1970, y = 2000000, legend = c('GDP',paste0('Cost for ', service)),
lty = c(1, 0),
pch = c(-1, 1),
col = c(1,2))
par(new= TRUE)
plot(y = y, x = GDP_deflator$Year, cex=1, yaxt="n",xaxt="n", ylab = "", xlab = '', col = 2)
abline(v = c(2003, 2013))
axis(side = 4, col = 2)
mtext(side = 1, at = c(1960, 1980, 2003, 2013), text = c(1960, 1980, 2003, 2013), padj = 1)
}
write.csv(smooth_cost, 'smooth_cost.csv')
# A script for smoothing price using GDP deflator
# Assume that the % change is the same for the two quantities
rm(list=ls())
library(tidyverse)
library(reshape2)
library(parallel)
setwd("C:\\Users\\tomli\\Desktop\\DM")
GDP_deflator <- read.csv('GDP_deflator_2014_byYear.csv') %>%
mutate(Time = 1:nrow(.))
HA_cost <- read.csv('HA cost.csv') %>%
rename('2003' = X2003,
'2013' = X2013) %>%
melt(id = 'Service') %>%
rename(Year = variable,
cost = value)
# Calculate difference in slope
diff_perc_change <- function(x, y, weight) {
sum1 <- sum(weight[-length(x)]^0.1 * abs(diff(x)/x[-length(x)] - diff(y)/y[-length(y)]))
sum2 <- sum(weight[-1]^0.1 * abs(diff(x)/x[-1] - diff(y)/y[-1]))
mean(c(sum1, sum2))
}
# Algorithm to impute missing value based on the slopes-------------------------
smooth <- function(service) {
library(tidyverse)
x <- GDP_deflator$GDP
y <- numeric(nrow(GDP_deflator))
y[c(43,53)] <- HA_cost %>%
filter(Service == service) %>%
select(cost) %>%
unlist()
missing <- (1:length(y))[-c(43, 53)]
y[missing] <- NA
y[missing] <- mean(y, na.rm=TRUE)
not_missing <- (1:length(y))[-missing]
distance <- apply(sapply(missing, function(x) x - not_missing), 2, function(x) min(abs(x)))
missing <- missing[order(distance)]
weight <- 1/(1+apply(sapply(1:length(x), function(x) x - not_missing), 2, function(x) min(abs(x))))
for(k in 1:100) {
for(i in missing) {
iter <- 1
while(iter < 30) {
old_coint <- diff_perc_change(x, y, weight)
y_i_old <- y[i]
y[i] <- rnorm(n = 1, mean = y[i], sd = mean(y)/10)
eps <- diff_perc_change(x, y, weight) - old_coint
if(eps > 0) {
y[i] <- y_i_old
}
iter <- iter + 1
}
}
}
output <- data.frame(y) %>%
mutate(Year = GDP_deflator$Year,
Service = service) %>%
rename(cost = y)
return(output)
}
no_cores <- detectCores() - 1
cl <- makeCluster(no_cores)
clusterExport(cl, list("smooth","HA_cost","GDP_deflator","diff_perc_change"),envir = .GlobalEnv)
smooth_cost <- parLapply(cl, unique(HA_cost$Service), smooth)
smooth_cost <- Reduce(rbind, smooth_cost)
# Figure to compare the two trends---------------------------------------------------------
figure <- function(service) {
y <- smooth_cost %>%
filter(Service == service) %>%
select(cost) %>%
as.matrix()
plot(GDP ~ Year, data = GDP_deflator, type= 'l', xaxt="n", ylab = 'GDP', xlab = 'Year', main = service)
legend(x = 1970, y = 2000000, legend = c('GDP',paste0('Cost for ', service)),
lty = c(1, 0),
pch = c(-1, 1),
col = c(1,2))
par(new= TRUE)
plot(y = y, x = GDP_deflator$Year, cex=1, yaxt="n",xaxt="n", ylab = "", xlab = '', col = 2)
abline(v = c(2003, 2013))
axis(side = 4, col = 2)
mtext(side = 1, at = c(1960, 1980, 2003, 2013), text = c(1960, 1980, 2003, 2013), padj = 1)
}
write.csv(smooth_cost, 'smooth_cost.csv')
